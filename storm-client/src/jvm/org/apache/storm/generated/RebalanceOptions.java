/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.storm.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class RebalanceOptions implements org.apache.thrift.TBase<RebalanceOptions, RebalanceOptions._Fields>, java.io.Serializable, Cloneable, Comparable<RebalanceOptions> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RebalanceOptions");

  private static final org.apache.thrift.protocol.TField WAIT_SECS_FIELD_DESC = new org.apache.thrift.protocol.TField("wait_secs", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NUM_WORKERS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_workers", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NUM_EXECUTORS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_executors", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField TOPOLOGY_RESOURCES_OVERRIDES_FIELD_DESC = new org.apache.thrift.protocol.TField("topology_resources_overrides", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField TOPOLOGY_CONF_OVERRIDES_FIELD_DESC = new org.apache.thrift.protocol.TField("topology_conf_overrides", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PRINCIPAL_FIELD_DESC = new org.apache.thrift.protocol.TField("principal", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RebalanceOptionsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RebalanceOptionsTupleSchemeFactory());
  }

  private int wait_secs; // optional
  private int num_workers; // optional
  private Map<String,Integer> num_executors; // optional
  private Map<String,Map<String,Double>> topology_resources_overrides; // optional
  private String topology_conf_overrides; // optional
  private String principal; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WAIT_SECS((short)1, "wait_secs"),
    NUM_WORKERS((short)2, "num_workers"),
    NUM_EXECUTORS((short)3, "num_executors"),
    TOPOLOGY_RESOURCES_OVERRIDES((short)4, "topology_resources_overrides"),
    TOPOLOGY_CONF_OVERRIDES((short)5, "topology_conf_overrides"),
    PRINCIPAL((short)6, "principal");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WAIT_SECS
          return WAIT_SECS;
        case 2: // NUM_WORKERS
          return NUM_WORKERS;
        case 3: // NUM_EXECUTORS
          return NUM_EXECUTORS;
        case 4: // TOPOLOGY_RESOURCES_OVERRIDES
          return TOPOLOGY_RESOURCES_OVERRIDES;
        case 5: // TOPOLOGY_CONF_OVERRIDES
          return TOPOLOGY_CONF_OVERRIDES;
        case 6: // PRINCIPAL
          return PRINCIPAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __WAIT_SECS_ISSET_ID = 0;
  private static final int __NUM_WORKERS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.WAIT_SECS,_Fields.NUM_WORKERS,_Fields.NUM_EXECUTORS,_Fields.TOPOLOGY_RESOURCES_OVERRIDES,_Fields.TOPOLOGY_CONF_OVERRIDES,_Fields.PRINCIPAL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WAIT_SECS, new org.apache.thrift.meta_data.FieldMetaData("wait_secs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_WORKERS, new org.apache.thrift.meta_data.FieldMetaData("num_workers", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_EXECUTORS, new org.apache.thrift.meta_data.FieldMetaData("num_executors", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.TOPOLOGY_RESOURCES_OVERRIDES, new org.apache.thrift.meta_data.FieldMetaData("topology_resources_overrides", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
    tmpMap.put(_Fields.TOPOLOGY_CONF_OVERRIDES, new org.apache.thrift.meta_data.FieldMetaData("topology_conf_overrides", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRINCIPAL, new org.apache.thrift.meta_data.FieldMetaData("principal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RebalanceOptions.class, metaDataMap);
  }

  public RebalanceOptions() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RebalanceOptions(RebalanceOptions other) {
    __isset_bitfield = other.__isset_bitfield;
    this.wait_secs = other.wait_secs;
    this.num_workers = other.num_workers;
    if (other.is_set_num_executors()) {
      Map<String,Integer> __this__num_executors = new HashMap<String,Integer>(other.num_executors);
      this.num_executors = __this__num_executors;
    }
    if (other.is_set_topology_resources_overrides()) {
      Map<String,Map<String,Double>> __this__topology_resources_overrides = new HashMap<String,Map<String,Double>>(other.topology_resources_overrides.size());
      for (Map.Entry<String, Map<String,Double>> other_element : other.topology_resources_overrides.entrySet()) {

        String other_element_key = other_element.getKey();
        Map<String,Double> other_element_value = other_element.getValue();

        String __this__topology_resources_overrides_copy_key = other_element_key;

        Map<String,Double> __this__topology_resources_overrides_copy_value = new HashMap<String,Double>(other_element_value);

        __this__topology_resources_overrides.put(__this__topology_resources_overrides_copy_key, __this__topology_resources_overrides_copy_value);
      }
      this.topology_resources_overrides = __this__topology_resources_overrides;
    }
    if (other.is_set_topology_conf_overrides()) {
      this.topology_conf_overrides = other.topology_conf_overrides;
    }
    if (other.is_set_principal()) {
      this.principal = other.principal;
    }
  }

  public RebalanceOptions deepCopy() {
    return new RebalanceOptions(this);
  }

  @Override
  public void clear() {
    set_wait_secs_isSet(false);
    this.wait_secs = 0;
    set_num_workers_isSet(false);
    this.num_workers = 0;
    this.num_executors = null;
    this.topology_resources_overrides = null;
    this.topology_conf_overrides = null;
    this.principal = null;
  }

  public int get_wait_secs() {
    return this.wait_secs;
  }

  public void set_wait_secs(int wait_secs) {
    this.wait_secs = wait_secs;
    set_wait_secs_isSet(true);
  }

  public void unset_wait_secs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WAIT_SECS_ISSET_ID);
  }

  /** Returns true if field wait_secs is set (has been assigned a value) and false otherwise */
  public boolean is_set_wait_secs() {
    return EncodingUtils.testBit(__isset_bitfield, __WAIT_SECS_ISSET_ID);
  }

  public void set_wait_secs_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WAIT_SECS_ISSET_ID, value);
  }

  public int get_num_workers() {
    return this.num_workers;
  }

  public void set_num_workers(int num_workers) {
    this.num_workers = num_workers;
    set_num_workers_isSet(true);
  }

  public void unset_num_workers() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_WORKERS_ISSET_ID);
  }

  /** Returns true if field num_workers is set (has been assigned a value) and false otherwise */
  public boolean is_set_num_workers() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_WORKERS_ISSET_ID);
  }

  public void set_num_workers_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_WORKERS_ISSET_ID, value);
  }

  public int get_num_executors_size() {
    return (this.num_executors == null) ? 0 : this.num_executors.size();
  }

  public void put_to_num_executors(String key, int val) {
    if (this.num_executors == null) {
      this.num_executors = new HashMap<String,Integer>();
    }
    this.num_executors.put(key, val);
  }

  public Map<String,Integer> get_num_executors() {
    return this.num_executors;
  }

  public void set_num_executors(Map<String,Integer> num_executors) {
    this.num_executors = num_executors;
  }

  public void unset_num_executors() {
    this.num_executors = null;
  }

  /** Returns true if field num_executors is set (has been assigned a value) and false otherwise */
  public boolean is_set_num_executors() {
    return this.num_executors != null;
  }

  public void set_num_executors_isSet(boolean value) {
    if (!value) {
      this.num_executors = null;
    }
  }

  public int get_topology_resources_overrides_size() {
    return (this.topology_resources_overrides == null) ? 0 : this.topology_resources_overrides.size();
  }

  public void put_to_topology_resources_overrides(String key, Map<String,Double> val) {
    if (this.topology_resources_overrides == null) {
      this.topology_resources_overrides = new HashMap<String,Map<String,Double>>();
    }
    this.topology_resources_overrides.put(key, val);
  }

  public Map<String,Map<String,Double>> get_topology_resources_overrides() {
    return this.topology_resources_overrides;
  }

  public void set_topology_resources_overrides(Map<String,Map<String,Double>> topology_resources_overrides) {
    this.topology_resources_overrides = topology_resources_overrides;
  }

  public void unset_topology_resources_overrides() {
    this.topology_resources_overrides = null;
  }

  /** Returns true if field topology_resources_overrides is set (has been assigned a value) and false otherwise */
  public boolean is_set_topology_resources_overrides() {
    return this.topology_resources_overrides != null;
  }

  public void set_topology_resources_overrides_isSet(boolean value) {
    if (!value) {
      this.topology_resources_overrides = null;
    }
  }

  public String get_topology_conf_overrides() {
    return this.topology_conf_overrides;
  }

  public void set_topology_conf_overrides(String topology_conf_overrides) {
    this.topology_conf_overrides = topology_conf_overrides;
  }

  public void unset_topology_conf_overrides() {
    this.topology_conf_overrides = null;
  }

  /** Returns true if field topology_conf_overrides is set (has been assigned a value) and false otherwise */
  public boolean is_set_topology_conf_overrides() {
    return this.topology_conf_overrides != null;
  }

  public void set_topology_conf_overrides_isSet(boolean value) {
    if (!value) {
      this.topology_conf_overrides = null;
    }
  }

  public String get_principal() {
    return this.principal;
  }

  public void set_principal(String principal) {
    this.principal = principal;
  }

  public void unset_principal() {
    this.principal = null;
  }

  /** Returns true if field principal is set (has been assigned a value) and false otherwise */
  public boolean is_set_principal() {
    return this.principal != null;
  }

  public void set_principal_isSet(boolean value) {
    if (!value) {
      this.principal = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case WAIT_SECS:
      if (value == null) {
        unset_wait_secs();
      } else {
        set_wait_secs((Integer)value);
      }
      break;

    case NUM_WORKERS:
      if (value == null) {
        unset_num_workers();
      } else {
        set_num_workers((Integer)value);
      }
      break;

    case NUM_EXECUTORS:
      if (value == null) {
        unset_num_executors();
      } else {
        set_num_executors((Map<String,Integer>)value);
      }
      break;

    case TOPOLOGY_RESOURCES_OVERRIDES:
      if (value == null) {
        unset_topology_resources_overrides();
      } else {
        set_topology_resources_overrides((Map<String,Map<String,Double>>)value);
      }
      break;

    case TOPOLOGY_CONF_OVERRIDES:
      if (value == null) {
        unset_topology_conf_overrides();
      } else {
        set_topology_conf_overrides((String)value);
      }
      break;

    case PRINCIPAL:
      if (value == null) {
        unset_principal();
      } else {
        set_principal((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case WAIT_SECS:
      return get_wait_secs();

    case NUM_WORKERS:
      return get_num_workers();

    case NUM_EXECUTORS:
      return get_num_executors();

    case TOPOLOGY_RESOURCES_OVERRIDES:
      return get_topology_resources_overrides();

    case TOPOLOGY_CONF_OVERRIDES:
      return get_topology_conf_overrides();

    case PRINCIPAL:
      return get_principal();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case WAIT_SECS:
      return is_set_wait_secs();
    case NUM_WORKERS:
      return is_set_num_workers();
    case NUM_EXECUTORS:
      return is_set_num_executors();
    case TOPOLOGY_RESOURCES_OVERRIDES:
      return is_set_topology_resources_overrides();
    case TOPOLOGY_CONF_OVERRIDES:
      return is_set_topology_conf_overrides();
    case PRINCIPAL:
      return is_set_principal();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RebalanceOptions)
      return this.equals((RebalanceOptions)that);
    return false;
  }

  public boolean equals(RebalanceOptions that) {
    if (that == null)
      return false;

    boolean this_present_wait_secs = true && this.is_set_wait_secs();
    boolean that_present_wait_secs = true && that.is_set_wait_secs();
    if (this_present_wait_secs || that_present_wait_secs) {
      if (!(this_present_wait_secs && that_present_wait_secs))
        return false;
      if (this.wait_secs != that.wait_secs)
        return false;
    }

    boolean this_present_num_workers = true && this.is_set_num_workers();
    boolean that_present_num_workers = true && that.is_set_num_workers();
    if (this_present_num_workers || that_present_num_workers) {
      if (!(this_present_num_workers && that_present_num_workers))
        return false;
      if (this.num_workers != that.num_workers)
        return false;
    }

    boolean this_present_num_executors = true && this.is_set_num_executors();
    boolean that_present_num_executors = true && that.is_set_num_executors();
    if (this_present_num_executors || that_present_num_executors) {
      if (!(this_present_num_executors && that_present_num_executors))
        return false;
      if (!this.num_executors.equals(that.num_executors))
        return false;
    }

    boolean this_present_topology_resources_overrides = true && this.is_set_topology_resources_overrides();
    boolean that_present_topology_resources_overrides = true && that.is_set_topology_resources_overrides();
    if (this_present_topology_resources_overrides || that_present_topology_resources_overrides) {
      if (!(this_present_topology_resources_overrides && that_present_topology_resources_overrides))
        return false;
      if (!this.topology_resources_overrides.equals(that.topology_resources_overrides))
        return false;
    }

    boolean this_present_topology_conf_overrides = true && this.is_set_topology_conf_overrides();
    boolean that_present_topology_conf_overrides = true && that.is_set_topology_conf_overrides();
    if (this_present_topology_conf_overrides || that_present_topology_conf_overrides) {
      if (!(this_present_topology_conf_overrides && that_present_topology_conf_overrides))
        return false;
      if (!this.topology_conf_overrides.equals(that.topology_conf_overrides))
        return false;
    }

    boolean this_present_principal = true && this.is_set_principal();
    boolean that_present_principal = true && that.is_set_principal();
    if (this_present_principal || that_present_principal) {
      if (!(this_present_principal && that_present_principal))
        return false;
      if (!this.principal.equals(that.principal))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_wait_secs = true && (is_set_wait_secs());
    list.add(present_wait_secs);
    if (present_wait_secs)
      list.add(wait_secs);

    boolean present_num_workers = true && (is_set_num_workers());
    list.add(present_num_workers);
    if (present_num_workers)
      list.add(num_workers);

    boolean present_num_executors = true && (is_set_num_executors());
    list.add(present_num_executors);
    if (present_num_executors)
      list.add(num_executors);

    boolean present_topology_resources_overrides = true && (is_set_topology_resources_overrides());
    list.add(present_topology_resources_overrides);
    if (present_topology_resources_overrides)
      list.add(topology_resources_overrides);

    boolean present_topology_conf_overrides = true && (is_set_topology_conf_overrides());
    list.add(present_topology_conf_overrides);
    if (present_topology_conf_overrides)
      list.add(topology_conf_overrides);

    boolean present_principal = true && (is_set_principal());
    list.add(present_principal);
    if (present_principal)
      list.add(principal);

    return list.hashCode();
  }

  @Override
  public int compareTo(RebalanceOptions other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_wait_secs()).compareTo(other.is_set_wait_secs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_wait_secs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wait_secs, other.wait_secs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_num_workers()).compareTo(other.is_set_num_workers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_num_workers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_workers, other.num_workers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_num_executors()).compareTo(other.is_set_num_executors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_num_executors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_executors, other.num_executors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_topology_resources_overrides()).compareTo(other.is_set_topology_resources_overrides());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_topology_resources_overrides()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topology_resources_overrides, other.topology_resources_overrides);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_topology_conf_overrides()).compareTo(other.is_set_topology_conf_overrides());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_topology_conf_overrides()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topology_conf_overrides, other.topology_conf_overrides);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_principal()).compareTo(other.is_set_principal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_principal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.principal, other.principal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RebalanceOptions(");
    boolean first = true;

    if (is_set_wait_secs()) {
      sb.append("wait_secs:");
      sb.append(this.wait_secs);
      first = false;
    }
    if (is_set_num_workers()) {
      if (!first) sb.append(", ");
      sb.append("num_workers:");
      sb.append(this.num_workers);
      first = false;
    }
    if (is_set_num_executors()) {
      if (!first) sb.append(", ");
      sb.append("num_executors:");
      if (this.num_executors == null) {
        sb.append("null");
      } else {
        sb.append(this.num_executors);
      }
      first = false;
    }
    if (is_set_topology_resources_overrides()) {
      if (!first) sb.append(", ");
      sb.append("topology_resources_overrides:");
      if (this.topology_resources_overrides == null) {
        sb.append("null");
      } else {
        sb.append(this.topology_resources_overrides);
      }
      first = false;
    }
    if (is_set_topology_conf_overrides()) {
      if (!first) sb.append(", ");
      sb.append("topology_conf_overrides:");
      if (this.topology_conf_overrides == null) {
        sb.append("null");
      } else {
        sb.append(this.topology_conf_overrides);
      }
      first = false;
    }
    if (is_set_principal()) {
      if (!first) sb.append(", ");
      sb.append("principal:");
      if (this.principal == null) {
        sb.append("null");
      } else {
        sb.append(this.principal);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RebalanceOptionsStandardSchemeFactory implements SchemeFactory {
    public RebalanceOptionsStandardScheme getScheme() {
      return new RebalanceOptionsStandardScheme();
    }
  }

  private static class RebalanceOptionsStandardScheme extends StandardScheme<RebalanceOptions> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RebalanceOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WAIT_SECS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wait_secs = iprot.readI32();
              struct.set_wait_secs_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUM_WORKERS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_workers = iprot.readI32();
              struct.set_num_workers_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NUM_EXECUTORS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map566 = iprot.readMapBegin();
                struct.num_executors = new HashMap<String,Integer>(2*_map566.size);
                String _key567;
                int _val568;
                for (int _i569 = 0; _i569 < _map566.size; ++_i569)
                {
                  _key567 = iprot.readString();
                  _val568 = iprot.readI32();
                  struct.num_executors.put(_key567, _val568);
                }
                iprot.readMapEnd();
              }
              struct.set_num_executors_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOPOLOGY_RESOURCES_OVERRIDES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map570 = iprot.readMapBegin();
                struct.topology_resources_overrides = new HashMap<String,Map<String,Double>>(2*_map570.size);
                String _key571;
                Map<String,Double> _val572;
                for (int _i573 = 0; _i573 < _map570.size; ++_i573)
                {
                  _key571 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TMap _map574 = iprot.readMapBegin();
                    _val572 = new HashMap<String,Double>(2*_map574.size);
                    String _key575;
                    double _val576;
                    for (int _i577 = 0; _i577 < _map574.size; ++_i577)
                    {
                      _key575 = iprot.readString();
                      _val576 = iprot.readDouble();
                      _val572.put(_key575, _val576);
                    }
                    iprot.readMapEnd();
                  }
                  struct.topology_resources_overrides.put(_key571, _val572);
                }
                iprot.readMapEnd();
              }
              struct.set_topology_resources_overrides_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TOPOLOGY_CONF_OVERRIDES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.topology_conf_overrides = iprot.readString();
              struct.set_topology_conf_overrides_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PRINCIPAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.principal = iprot.readString();
              struct.set_principal_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RebalanceOptions struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.is_set_wait_secs()) {
        oprot.writeFieldBegin(WAIT_SECS_FIELD_DESC);
        oprot.writeI32(struct.wait_secs);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_num_workers()) {
        oprot.writeFieldBegin(NUM_WORKERS_FIELD_DESC);
        oprot.writeI32(struct.num_workers);
        oprot.writeFieldEnd();
      }
      if (struct.num_executors != null) {
        if (struct.is_set_num_executors()) {
          oprot.writeFieldBegin(NUM_EXECUTORS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.num_executors.size()));
            for (Map.Entry<String, Integer> _iter578 : struct.num_executors.entrySet())
            {
              oprot.writeString(_iter578.getKey());
              oprot.writeI32(_iter578.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.topology_resources_overrides != null) {
        if (struct.is_set_topology_resources_overrides()) {
          oprot.writeFieldBegin(TOPOLOGY_RESOURCES_OVERRIDES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.topology_resources_overrides.size()));
            for (Map.Entry<String, Map<String,Double>> _iter579 : struct.topology_resources_overrides.entrySet())
            {
              oprot.writeString(_iter579.getKey());
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, _iter579.getValue().size()));
                for (Map.Entry<String, Double> _iter580 : _iter579.getValue().entrySet())
                {
                  oprot.writeString(_iter580.getKey());
                  oprot.writeDouble(_iter580.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.topology_conf_overrides != null) {
        if (struct.is_set_topology_conf_overrides()) {
          oprot.writeFieldBegin(TOPOLOGY_CONF_OVERRIDES_FIELD_DESC);
          oprot.writeString(struct.topology_conf_overrides);
          oprot.writeFieldEnd();
        }
      }
      if (struct.principal != null) {
        if (struct.is_set_principal()) {
          oprot.writeFieldBegin(PRINCIPAL_FIELD_DESC);
          oprot.writeString(struct.principal);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RebalanceOptionsTupleSchemeFactory implements SchemeFactory {
    public RebalanceOptionsTupleScheme getScheme() {
      return new RebalanceOptionsTupleScheme();
    }
  }

  private static class RebalanceOptionsTupleScheme extends TupleScheme<RebalanceOptions> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RebalanceOptions struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.is_set_wait_secs()) {
        optionals.set(0);
      }
      if (struct.is_set_num_workers()) {
        optionals.set(1);
      }
      if (struct.is_set_num_executors()) {
        optionals.set(2);
      }
      if (struct.is_set_topology_resources_overrides()) {
        optionals.set(3);
      }
      if (struct.is_set_topology_conf_overrides()) {
        optionals.set(4);
      }
      if (struct.is_set_principal()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.is_set_wait_secs()) {
        oprot.writeI32(struct.wait_secs);
      }
      if (struct.is_set_num_workers()) {
        oprot.writeI32(struct.num_workers);
      }
      if (struct.is_set_num_executors()) {
        {
          oprot.writeI32(struct.num_executors.size());
          for (Map.Entry<String, Integer> _iter581 : struct.num_executors.entrySet())
          {
            oprot.writeString(_iter581.getKey());
            oprot.writeI32(_iter581.getValue());
          }
        }
      }
      if (struct.is_set_topology_resources_overrides()) {
        {
          oprot.writeI32(struct.topology_resources_overrides.size());
          for (Map.Entry<String, Map<String,Double>> _iter582 : struct.topology_resources_overrides.entrySet())
          {
            oprot.writeString(_iter582.getKey());
            {
              oprot.writeI32(_iter582.getValue().size());
              for (Map.Entry<String, Double> _iter583 : _iter582.getValue().entrySet())
              {
                oprot.writeString(_iter583.getKey());
                oprot.writeDouble(_iter583.getValue());
              }
            }
          }
        }
      }
      if (struct.is_set_topology_conf_overrides()) {
        oprot.writeString(struct.topology_conf_overrides);
      }
      if (struct.is_set_principal()) {
        oprot.writeString(struct.principal);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RebalanceOptions struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.wait_secs = iprot.readI32();
        struct.set_wait_secs_isSet(true);
      }
      if (incoming.get(1)) {
        struct.num_workers = iprot.readI32();
        struct.set_num_workers_isSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map584 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.num_executors = new HashMap<String,Integer>(2*_map584.size);
          String _key585;
          int _val586;
          for (int _i587 = 0; _i587 < _map584.size; ++_i587)
          {
            _key585 = iprot.readString();
            _val586 = iprot.readI32();
            struct.num_executors.put(_key585, _val586);
          }
        }
        struct.set_num_executors_isSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map588 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.topology_resources_overrides = new HashMap<String,Map<String,Double>>(2*_map588.size);
          String _key589;
          Map<String,Double> _val590;
          for (int _i591 = 0; _i591 < _map588.size; ++_i591)
          {
            _key589 = iprot.readString();
            {
              org.apache.thrift.protocol.TMap _map592 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
              _val590 = new HashMap<String,Double>(2*_map592.size);
              String _key593;
              double _val594;
              for (int _i595 = 0; _i595 < _map592.size; ++_i595)
              {
                _key593 = iprot.readString();
                _val594 = iprot.readDouble();
                _val590.put(_key593, _val594);
              }
            }
            struct.topology_resources_overrides.put(_key589, _val590);
          }
        }
        struct.set_topology_resources_overrides_isSet(true);
      }
      if (incoming.get(4)) {
        struct.topology_conf_overrides = iprot.readString();
        struct.set_topology_conf_overrides_isSet(true);
      }
      if (incoming.get(5)) {
        struct.principal = iprot.readString();
        struct.set_principal_isSet(true);
      }
    }
  }

}

