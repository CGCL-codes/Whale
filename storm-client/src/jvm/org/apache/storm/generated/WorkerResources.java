/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.storm.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class WorkerResources implements org.apache.thrift.TBase<WorkerResources, WorkerResources._Fields>, java.io.Serializable, Cloneable, Comparable<WorkerResources> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WorkerResources");

  private static final org.apache.thrift.protocol.TField MEM_ON_HEAP_FIELD_DESC = new org.apache.thrift.protocol.TField("mem_on_heap", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField MEM_OFF_HEAP_FIELD_DESC = new org.apache.thrift.protocol.TField("mem_off_heap", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField CPU_FIELD_DESC = new org.apache.thrift.protocol.TField("cpu", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField SHARED_MEM_ON_HEAP_FIELD_DESC = new org.apache.thrift.protocol.TField("shared_mem_on_heap", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField SHARED_MEM_OFF_HEAP_FIELD_DESC = new org.apache.thrift.protocol.TField("shared_mem_off_heap", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField RESOURCES_FIELD_DESC = new org.apache.thrift.protocol.TField("resources", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField SHARED_RESOURCES_FIELD_DESC = new org.apache.thrift.protocol.TField("shared_resources", org.apache.thrift.protocol.TType.MAP, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WorkerResourcesStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WorkerResourcesTupleSchemeFactory());
  }

  private double mem_on_heap; // optional
  private double mem_off_heap; // optional
  private double cpu; // optional
  private double shared_mem_on_heap; // optional
  private double shared_mem_off_heap; // optional
  private Map<String,Double> resources; // optional
  private Map<String,Double> shared_resources; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MEM_ON_HEAP((short)1, "mem_on_heap"),
    MEM_OFF_HEAP((short)2, "mem_off_heap"),
    CPU((short)3, "cpu"),
    SHARED_MEM_ON_HEAP((short)4, "shared_mem_on_heap"),
    SHARED_MEM_OFF_HEAP((short)5, "shared_mem_off_heap"),
    RESOURCES((short)6, "resources"),
    SHARED_RESOURCES((short)7, "shared_resources");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MEM_ON_HEAP
          return MEM_ON_HEAP;
        case 2: // MEM_OFF_HEAP
          return MEM_OFF_HEAP;
        case 3: // CPU
          return CPU;
        case 4: // SHARED_MEM_ON_HEAP
          return SHARED_MEM_ON_HEAP;
        case 5: // SHARED_MEM_OFF_HEAP
          return SHARED_MEM_OFF_HEAP;
        case 6: // RESOURCES
          return RESOURCES;
        case 7: // SHARED_RESOURCES
          return SHARED_RESOURCES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MEM_ON_HEAP_ISSET_ID = 0;
  private static final int __MEM_OFF_HEAP_ISSET_ID = 1;
  private static final int __CPU_ISSET_ID = 2;
  private static final int __SHARED_MEM_ON_HEAP_ISSET_ID = 3;
  private static final int __SHARED_MEM_OFF_HEAP_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.MEM_ON_HEAP,_Fields.MEM_OFF_HEAP,_Fields.CPU,_Fields.SHARED_MEM_ON_HEAP,_Fields.SHARED_MEM_OFF_HEAP,_Fields.RESOURCES,_Fields.SHARED_RESOURCES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MEM_ON_HEAP, new org.apache.thrift.meta_data.FieldMetaData("mem_on_heap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MEM_OFF_HEAP, new org.apache.thrift.meta_data.FieldMetaData("mem_off_heap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CPU, new org.apache.thrift.meta_data.FieldMetaData("cpu", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHARED_MEM_ON_HEAP, new org.apache.thrift.meta_data.FieldMetaData("shared_mem_on_heap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHARED_MEM_OFF_HEAP, new org.apache.thrift.meta_data.FieldMetaData("shared_mem_off_heap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RESOURCES, new org.apache.thrift.meta_data.FieldMetaData("resources", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.SHARED_RESOURCES, new org.apache.thrift.meta_data.FieldMetaData("shared_resources", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WorkerResources.class, metaDataMap);
  }

  public WorkerResources() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WorkerResources(WorkerResources other) {
    __isset_bitfield = other.__isset_bitfield;
    this.mem_on_heap = other.mem_on_heap;
    this.mem_off_heap = other.mem_off_heap;
    this.cpu = other.cpu;
    this.shared_mem_on_heap = other.shared_mem_on_heap;
    this.shared_mem_off_heap = other.shared_mem_off_heap;
    if (other.is_set_resources()) {
      Map<String,Double> __this__resources = new HashMap<String,Double>(other.resources);
      this.resources = __this__resources;
    }
    if (other.is_set_shared_resources()) {
      Map<String,Double> __this__shared_resources = new HashMap<String,Double>(other.shared_resources);
      this.shared_resources = __this__shared_resources;
    }
  }

  public WorkerResources deepCopy() {
    return new WorkerResources(this);
  }

  @Override
  public void clear() {
    set_mem_on_heap_isSet(false);
    this.mem_on_heap = 0.0;
    set_mem_off_heap_isSet(false);
    this.mem_off_heap = 0.0;
    set_cpu_isSet(false);
    this.cpu = 0.0;
    set_shared_mem_on_heap_isSet(false);
    this.shared_mem_on_heap = 0.0;
    set_shared_mem_off_heap_isSet(false);
    this.shared_mem_off_heap = 0.0;
    this.resources = null;
    this.shared_resources = null;
  }

  public double get_mem_on_heap() {
    return this.mem_on_heap;
  }

  public void set_mem_on_heap(double mem_on_heap) {
    this.mem_on_heap = mem_on_heap;
    set_mem_on_heap_isSet(true);
  }

  public void unset_mem_on_heap() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEM_ON_HEAP_ISSET_ID);
  }

  /** Returns true if field mem_on_heap is set (has been assigned a value) and false otherwise */
  public boolean is_set_mem_on_heap() {
    return EncodingUtils.testBit(__isset_bitfield, __MEM_ON_HEAP_ISSET_ID);
  }

  public void set_mem_on_heap_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEM_ON_HEAP_ISSET_ID, value);
  }

  public double get_mem_off_heap() {
    return this.mem_off_heap;
  }

  public void set_mem_off_heap(double mem_off_heap) {
    this.mem_off_heap = mem_off_heap;
    set_mem_off_heap_isSet(true);
  }

  public void unset_mem_off_heap() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEM_OFF_HEAP_ISSET_ID);
  }

  /** Returns true if field mem_off_heap is set (has been assigned a value) and false otherwise */
  public boolean is_set_mem_off_heap() {
    return EncodingUtils.testBit(__isset_bitfield, __MEM_OFF_HEAP_ISSET_ID);
  }

  public void set_mem_off_heap_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEM_OFF_HEAP_ISSET_ID, value);
  }

  public double get_cpu() {
    return this.cpu;
  }

  public void set_cpu(double cpu) {
    this.cpu = cpu;
    set_cpu_isSet(true);
  }

  public void unset_cpu() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CPU_ISSET_ID);
  }

  /** Returns true if field cpu is set (has been assigned a value) and false otherwise */
  public boolean is_set_cpu() {
    return EncodingUtils.testBit(__isset_bitfield, __CPU_ISSET_ID);
  }

  public void set_cpu_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CPU_ISSET_ID, value);
  }

  public double get_shared_mem_on_heap() {
    return this.shared_mem_on_heap;
  }

  public void set_shared_mem_on_heap(double shared_mem_on_heap) {
    this.shared_mem_on_heap = shared_mem_on_heap;
    set_shared_mem_on_heap_isSet(true);
  }

  public void unset_shared_mem_on_heap() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHARED_MEM_ON_HEAP_ISSET_ID);
  }

  /** Returns true if field shared_mem_on_heap is set (has been assigned a value) and false otherwise */
  public boolean is_set_shared_mem_on_heap() {
    return EncodingUtils.testBit(__isset_bitfield, __SHARED_MEM_ON_HEAP_ISSET_ID);
  }

  public void set_shared_mem_on_heap_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHARED_MEM_ON_HEAP_ISSET_ID, value);
  }

  public double get_shared_mem_off_heap() {
    return this.shared_mem_off_heap;
  }

  public void set_shared_mem_off_heap(double shared_mem_off_heap) {
    this.shared_mem_off_heap = shared_mem_off_heap;
    set_shared_mem_off_heap_isSet(true);
  }

  public void unset_shared_mem_off_heap() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHARED_MEM_OFF_HEAP_ISSET_ID);
  }

  /** Returns true if field shared_mem_off_heap is set (has been assigned a value) and false otherwise */
  public boolean is_set_shared_mem_off_heap() {
    return EncodingUtils.testBit(__isset_bitfield, __SHARED_MEM_OFF_HEAP_ISSET_ID);
  }

  public void set_shared_mem_off_heap_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHARED_MEM_OFF_HEAP_ISSET_ID, value);
  }

  public int get_resources_size() {
    return (this.resources == null) ? 0 : this.resources.size();
  }

  public void put_to_resources(String key, double val) {
    if (this.resources == null) {
      this.resources = new HashMap<String,Double>();
    }
    this.resources.put(key, val);
  }

  public Map<String,Double> get_resources() {
    return this.resources;
  }

  public void set_resources(Map<String,Double> resources) {
    this.resources = resources;
  }

  public void unset_resources() {
    this.resources = null;
  }

  /** Returns true if field resources is set (has been assigned a value) and false otherwise */
  public boolean is_set_resources() {
    return this.resources != null;
  }

  public void set_resources_isSet(boolean value) {
    if (!value) {
      this.resources = null;
    }
  }

  public int get_shared_resources_size() {
    return (this.shared_resources == null) ? 0 : this.shared_resources.size();
  }

  public void put_to_shared_resources(String key, double val) {
    if (this.shared_resources == null) {
      this.shared_resources = new HashMap<String,Double>();
    }
    this.shared_resources.put(key, val);
  }

  public Map<String,Double> get_shared_resources() {
    return this.shared_resources;
  }

  public void set_shared_resources(Map<String,Double> shared_resources) {
    this.shared_resources = shared_resources;
  }

  public void unset_shared_resources() {
    this.shared_resources = null;
  }

  /** Returns true if field shared_resources is set (has been assigned a value) and false otherwise */
  public boolean is_set_shared_resources() {
    return this.shared_resources != null;
  }

  public void set_shared_resources_isSet(boolean value) {
    if (!value) {
      this.shared_resources = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MEM_ON_HEAP:
      if (value == null) {
        unset_mem_on_heap();
      } else {
        set_mem_on_heap((Double)value);
      }
      break;

    case MEM_OFF_HEAP:
      if (value == null) {
        unset_mem_off_heap();
      } else {
        set_mem_off_heap((Double)value);
      }
      break;

    case CPU:
      if (value == null) {
        unset_cpu();
      } else {
        set_cpu((Double)value);
      }
      break;

    case SHARED_MEM_ON_HEAP:
      if (value == null) {
        unset_shared_mem_on_heap();
      } else {
        set_shared_mem_on_heap((Double)value);
      }
      break;

    case SHARED_MEM_OFF_HEAP:
      if (value == null) {
        unset_shared_mem_off_heap();
      } else {
        set_shared_mem_off_heap((Double)value);
      }
      break;

    case RESOURCES:
      if (value == null) {
        unset_resources();
      } else {
        set_resources((Map<String,Double>)value);
      }
      break;

    case SHARED_RESOURCES:
      if (value == null) {
        unset_shared_resources();
      } else {
        set_shared_resources((Map<String,Double>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MEM_ON_HEAP:
      return get_mem_on_heap();

    case MEM_OFF_HEAP:
      return get_mem_off_heap();

    case CPU:
      return get_cpu();

    case SHARED_MEM_ON_HEAP:
      return get_shared_mem_on_heap();

    case SHARED_MEM_OFF_HEAP:
      return get_shared_mem_off_heap();

    case RESOURCES:
      return get_resources();

    case SHARED_RESOURCES:
      return get_shared_resources();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MEM_ON_HEAP:
      return is_set_mem_on_heap();
    case MEM_OFF_HEAP:
      return is_set_mem_off_heap();
    case CPU:
      return is_set_cpu();
    case SHARED_MEM_ON_HEAP:
      return is_set_shared_mem_on_heap();
    case SHARED_MEM_OFF_HEAP:
      return is_set_shared_mem_off_heap();
    case RESOURCES:
      return is_set_resources();
    case SHARED_RESOURCES:
      return is_set_shared_resources();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WorkerResources)
      return this.equals((WorkerResources)that);
    return false;
  }

  public boolean equals(WorkerResources that) {
    if (that == null)
      return false;

    boolean this_present_mem_on_heap = true && this.is_set_mem_on_heap();
    boolean that_present_mem_on_heap = true && that.is_set_mem_on_heap();
    if (this_present_mem_on_heap || that_present_mem_on_heap) {
      if (!(this_present_mem_on_heap && that_present_mem_on_heap))
        return false;
      if (this.mem_on_heap != that.mem_on_heap)
        return false;
    }

    boolean this_present_mem_off_heap = true && this.is_set_mem_off_heap();
    boolean that_present_mem_off_heap = true && that.is_set_mem_off_heap();
    if (this_present_mem_off_heap || that_present_mem_off_heap) {
      if (!(this_present_mem_off_heap && that_present_mem_off_heap))
        return false;
      if (this.mem_off_heap != that.mem_off_heap)
        return false;
    }

    boolean this_present_cpu = true && this.is_set_cpu();
    boolean that_present_cpu = true && that.is_set_cpu();
    if (this_present_cpu || that_present_cpu) {
      if (!(this_present_cpu && that_present_cpu))
        return false;
      if (this.cpu != that.cpu)
        return false;
    }

    boolean this_present_shared_mem_on_heap = true && this.is_set_shared_mem_on_heap();
    boolean that_present_shared_mem_on_heap = true && that.is_set_shared_mem_on_heap();
    if (this_present_shared_mem_on_heap || that_present_shared_mem_on_heap) {
      if (!(this_present_shared_mem_on_heap && that_present_shared_mem_on_heap))
        return false;
      if (this.shared_mem_on_heap != that.shared_mem_on_heap)
        return false;
    }

    boolean this_present_shared_mem_off_heap = true && this.is_set_shared_mem_off_heap();
    boolean that_present_shared_mem_off_heap = true && that.is_set_shared_mem_off_heap();
    if (this_present_shared_mem_off_heap || that_present_shared_mem_off_heap) {
      if (!(this_present_shared_mem_off_heap && that_present_shared_mem_off_heap))
        return false;
      if (this.shared_mem_off_heap != that.shared_mem_off_heap)
        return false;
    }

    boolean this_present_resources = true && this.is_set_resources();
    boolean that_present_resources = true && that.is_set_resources();
    if (this_present_resources || that_present_resources) {
      if (!(this_present_resources && that_present_resources))
        return false;
      if (!this.resources.equals(that.resources))
        return false;
    }

    boolean this_present_shared_resources = true && this.is_set_shared_resources();
    boolean that_present_shared_resources = true && that.is_set_shared_resources();
    if (this_present_shared_resources || that_present_shared_resources) {
      if (!(this_present_shared_resources && that_present_shared_resources))
        return false;
      if (!this.shared_resources.equals(that.shared_resources))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_mem_on_heap = true && (is_set_mem_on_heap());
    list.add(present_mem_on_heap);
    if (present_mem_on_heap)
      list.add(mem_on_heap);

    boolean present_mem_off_heap = true && (is_set_mem_off_heap());
    list.add(present_mem_off_heap);
    if (present_mem_off_heap)
      list.add(mem_off_heap);

    boolean present_cpu = true && (is_set_cpu());
    list.add(present_cpu);
    if (present_cpu)
      list.add(cpu);

    boolean present_shared_mem_on_heap = true && (is_set_shared_mem_on_heap());
    list.add(present_shared_mem_on_heap);
    if (present_shared_mem_on_heap)
      list.add(shared_mem_on_heap);

    boolean present_shared_mem_off_heap = true && (is_set_shared_mem_off_heap());
    list.add(present_shared_mem_off_heap);
    if (present_shared_mem_off_heap)
      list.add(shared_mem_off_heap);

    boolean present_resources = true && (is_set_resources());
    list.add(present_resources);
    if (present_resources)
      list.add(resources);

    boolean present_shared_resources = true && (is_set_shared_resources());
    list.add(present_shared_resources);
    if (present_shared_resources)
      list.add(shared_resources);

    return list.hashCode();
  }

  @Override
  public int compareTo(WorkerResources other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_mem_on_heap()).compareTo(other.is_set_mem_on_heap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_mem_on_heap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mem_on_heap, other.mem_on_heap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_mem_off_heap()).compareTo(other.is_set_mem_off_heap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_mem_off_heap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mem_off_heap, other.mem_off_heap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_cpu()).compareTo(other.is_set_cpu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_cpu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpu, other.cpu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_shared_mem_on_heap()).compareTo(other.is_set_shared_mem_on_heap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_shared_mem_on_heap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shared_mem_on_heap, other.shared_mem_on_heap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_shared_mem_off_heap()).compareTo(other.is_set_shared_mem_off_heap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_shared_mem_off_heap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shared_mem_off_heap, other.shared_mem_off_heap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_resources()).compareTo(other.is_set_resources());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_resources()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resources, other.resources);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_shared_resources()).compareTo(other.is_set_shared_resources());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_shared_resources()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shared_resources, other.shared_resources);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WorkerResources(");
    boolean first = true;

    if (is_set_mem_on_heap()) {
      sb.append("mem_on_heap:");
      sb.append(this.mem_on_heap);
      first = false;
    }
    if (is_set_mem_off_heap()) {
      if (!first) sb.append(", ");
      sb.append("mem_off_heap:");
      sb.append(this.mem_off_heap);
      first = false;
    }
    if (is_set_cpu()) {
      if (!first) sb.append(", ");
      sb.append("cpu:");
      sb.append(this.cpu);
      first = false;
    }
    if (is_set_shared_mem_on_heap()) {
      if (!first) sb.append(", ");
      sb.append("shared_mem_on_heap:");
      sb.append(this.shared_mem_on_heap);
      first = false;
    }
    if (is_set_shared_mem_off_heap()) {
      if (!first) sb.append(", ");
      sb.append("shared_mem_off_heap:");
      sb.append(this.shared_mem_off_heap);
      first = false;
    }
    if (is_set_resources()) {
      if (!first) sb.append(", ");
      sb.append("resources:");
      if (this.resources == null) {
        sb.append("null");
      } else {
        sb.append(this.resources);
      }
      first = false;
    }
    if (is_set_shared_resources()) {
      if (!first) sb.append(", ");
      sb.append("shared_resources:");
      if (this.shared_resources == null) {
        sb.append("null");
      } else {
        sb.append(this.shared_resources);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WorkerResourcesStandardSchemeFactory implements SchemeFactory {
    public WorkerResourcesStandardScheme getScheme() {
      return new WorkerResourcesStandardScheme();
    }
  }

  private static class WorkerResourcesStandardScheme extends StandardScheme<WorkerResources> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WorkerResources struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MEM_ON_HEAP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.mem_on_heap = iprot.readDouble();
              struct.set_mem_on_heap_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MEM_OFF_HEAP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.mem_off_heap = iprot.readDouble();
              struct.set_mem_off_heap_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CPU
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cpu = iprot.readDouble();
              struct.set_cpu_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SHARED_MEM_ON_HEAP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shared_mem_on_heap = iprot.readDouble();
              struct.set_shared_mem_on_heap_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SHARED_MEM_OFF_HEAP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shared_mem_off_heap = iprot.readDouble();
              struct.set_shared_mem_off_heap_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RESOURCES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map666 = iprot.readMapBegin();
                struct.resources = new HashMap<String,Double>(2*_map666.size);
                String _key667;
                double _val668;
                for (int _i669 = 0; _i669 < _map666.size; ++_i669)
                {
                  _key667 = iprot.readString();
                  _val668 = iprot.readDouble();
                  struct.resources.put(_key667, _val668);
                }
                iprot.readMapEnd();
              }
              struct.set_resources_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SHARED_RESOURCES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map670 = iprot.readMapBegin();
                struct.shared_resources = new HashMap<String,Double>(2*_map670.size);
                String _key671;
                double _val672;
                for (int _i673 = 0; _i673 < _map670.size; ++_i673)
                {
                  _key671 = iprot.readString();
                  _val672 = iprot.readDouble();
                  struct.shared_resources.put(_key671, _val672);
                }
                iprot.readMapEnd();
              }
              struct.set_shared_resources_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WorkerResources struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.is_set_mem_on_heap()) {
        oprot.writeFieldBegin(MEM_ON_HEAP_FIELD_DESC);
        oprot.writeDouble(struct.mem_on_heap);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_mem_off_heap()) {
        oprot.writeFieldBegin(MEM_OFF_HEAP_FIELD_DESC);
        oprot.writeDouble(struct.mem_off_heap);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_cpu()) {
        oprot.writeFieldBegin(CPU_FIELD_DESC);
        oprot.writeDouble(struct.cpu);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_shared_mem_on_heap()) {
        oprot.writeFieldBegin(SHARED_MEM_ON_HEAP_FIELD_DESC);
        oprot.writeDouble(struct.shared_mem_on_heap);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_shared_mem_off_heap()) {
        oprot.writeFieldBegin(SHARED_MEM_OFF_HEAP_FIELD_DESC);
        oprot.writeDouble(struct.shared_mem_off_heap);
        oprot.writeFieldEnd();
      }
      if (struct.resources != null) {
        if (struct.is_set_resources()) {
          oprot.writeFieldBegin(RESOURCES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, struct.resources.size()));
            for (Map.Entry<String, Double> _iter674 : struct.resources.entrySet())
            {
              oprot.writeString(_iter674.getKey());
              oprot.writeDouble(_iter674.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.shared_resources != null) {
        if (struct.is_set_shared_resources()) {
          oprot.writeFieldBegin(SHARED_RESOURCES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, struct.shared_resources.size()));
            for (Map.Entry<String, Double> _iter675 : struct.shared_resources.entrySet())
            {
              oprot.writeString(_iter675.getKey());
              oprot.writeDouble(_iter675.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WorkerResourcesTupleSchemeFactory implements SchemeFactory {
    public WorkerResourcesTupleScheme getScheme() {
      return new WorkerResourcesTupleScheme();
    }
  }

  private static class WorkerResourcesTupleScheme extends TupleScheme<WorkerResources> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WorkerResources struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.is_set_mem_on_heap()) {
        optionals.set(0);
      }
      if (struct.is_set_mem_off_heap()) {
        optionals.set(1);
      }
      if (struct.is_set_cpu()) {
        optionals.set(2);
      }
      if (struct.is_set_shared_mem_on_heap()) {
        optionals.set(3);
      }
      if (struct.is_set_shared_mem_off_heap()) {
        optionals.set(4);
      }
      if (struct.is_set_resources()) {
        optionals.set(5);
      }
      if (struct.is_set_shared_resources()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.is_set_mem_on_heap()) {
        oprot.writeDouble(struct.mem_on_heap);
      }
      if (struct.is_set_mem_off_heap()) {
        oprot.writeDouble(struct.mem_off_heap);
      }
      if (struct.is_set_cpu()) {
        oprot.writeDouble(struct.cpu);
      }
      if (struct.is_set_shared_mem_on_heap()) {
        oprot.writeDouble(struct.shared_mem_on_heap);
      }
      if (struct.is_set_shared_mem_off_heap()) {
        oprot.writeDouble(struct.shared_mem_off_heap);
      }
      if (struct.is_set_resources()) {
        {
          oprot.writeI32(struct.resources.size());
          for (Map.Entry<String, Double> _iter676 : struct.resources.entrySet())
          {
            oprot.writeString(_iter676.getKey());
            oprot.writeDouble(_iter676.getValue());
          }
        }
      }
      if (struct.is_set_shared_resources()) {
        {
          oprot.writeI32(struct.shared_resources.size());
          for (Map.Entry<String, Double> _iter677 : struct.shared_resources.entrySet())
          {
            oprot.writeString(_iter677.getKey());
            oprot.writeDouble(_iter677.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WorkerResources struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.mem_on_heap = iprot.readDouble();
        struct.set_mem_on_heap_isSet(true);
      }
      if (incoming.get(1)) {
        struct.mem_off_heap = iprot.readDouble();
        struct.set_mem_off_heap_isSet(true);
      }
      if (incoming.get(2)) {
        struct.cpu = iprot.readDouble();
        struct.set_cpu_isSet(true);
      }
      if (incoming.get(3)) {
        struct.shared_mem_on_heap = iprot.readDouble();
        struct.set_shared_mem_on_heap_isSet(true);
      }
      if (incoming.get(4)) {
        struct.shared_mem_off_heap = iprot.readDouble();
        struct.set_shared_mem_off_heap_isSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map678 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.resources = new HashMap<String,Double>(2*_map678.size);
          String _key679;
          double _val680;
          for (int _i681 = 0; _i681 < _map678.size; ++_i681)
          {
            _key679 = iprot.readString();
            _val680 = iprot.readDouble();
            struct.resources.put(_key679, _val680);
          }
        }
        struct.set_resources_isSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TMap _map682 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.shared_resources = new HashMap<String,Double>(2*_map682.size);
          String _key683;
          double _val684;
          for (int _i685 = 0; _i685 < _map682.size; ++_i685)
          {
            _key683 = iprot.readString();
            _val684 = iprot.readDouble();
            struct.shared_resources.put(_key683, _val684);
          }
        }
        struct.set_shared_resources_isSet(true);
      }
    }
  }

}

